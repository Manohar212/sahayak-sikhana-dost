
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { generateAIContent } from '@/services/aiService';
import { useToast } from '@/hooks/use-toast';
import ContentDownloader from './ContentDownloader';

const PersonalizedTips = () => {
  const [subject, setSubject] = useState('');
  const [grade, setGrade] = useState('');
  const [challenge, setChallenge] = useState('');
  const [generatedTips, setGeneratedTips] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const handleGenerate = async () => {
    if (!subject || !grade || !challenge) return;
    
    setIsGenerating(true);
    
    try {
      const tips = await generateAIContent('tips', '', { subject, grade, challenge });
      setGeneratedTips(tips);
      toast({
        title: "Tips Ready! üí°",
        description: "Your personalized teaching tips are ready!",
      });
    } catch (error) {
      console.error('Error generating tips:', error);
      toast({
        title: "Error",
        description: "Failed to generate tips. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(generatedTips);
    toast({
      title: "Copied! üìã",
      description: "Tips copied to clipboard",
    });
  };

  const handleGenerateNew = () => {
    setGeneratedTips('');
  };

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-yellow-800 dark:text-yellow-200">
            <span>üí°</span>
            <span>Personalized Teaching Tips</span>
          </CardTitle>
          <CardDescription className="text-yellow-600 dark:text-yellow-300">
            ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡§æ‡§è‡§Ç ‚Ä¢ Get AI-powered teaching strategies tailored for your needs
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2">
                ‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç ‚Ä¢ Choose Subject
              </label>
              <Select value={subject} onValueChange={setSubject}>
                <SelectTrigger className="bg-white dark:bg-gray-700 border-yellow-200 dark:border-yellow-700">
                  <SelectValue placeholder="Select subject / ‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="hindi">‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)</SelectItem>
                  <SelectItem value="english">English</SelectItem>
                  <SelectItem value="math">‡§ó‡§£‡§ø‡§§ (Mathematics)</SelectItem>
                  <SelectItem value="science">‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® (Science)</SelectItem>
                  <SelectItem value="social">‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® (Social Studies)</SelectItem>
                  <SelectItem value="general">‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø (General Teaching)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="block text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2">
                ‡§ï‡§ï‡•ç‡§∑‡§æ ‚Ä¢ Grade Level
              </label>
              <Select value={grade} onValueChange={setGrade}>
                <SelectTrigger className="bg-white dark:bg-gray-700 border-yellow-200 dark:border-yellow-700">
                  <SelectValue placeholder="Select grade / ‡§ï‡§ï‡•ç‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="primary">Primary (1-5)</SelectItem>
                  <SelectItem value="middle">Middle (6-8)</SelectItem>
                  <SelectItem value="secondary">Secondary (9-10)</SelectItem>
                  <SelectItem value="mixed">Mixed Classes</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2">
              ‡§ö‡•Å‡§®‡•å‡§§‡•Ä/‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‚Ä¢ Teaching Challenge
            </label>
            <Select value={challenge} onValueChange={setChallenge}>
              <SelectTrigger className="bg-white dark:bg-gray-700 border-yellow-200 dark:border-yellow-700">
                <SelectValue placeholder="Select your challenge / ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="attention">Student Attention / ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§® ‡§¶‡•á‡§®‡§æ</SelectItem>
                <SelectItem value="engagement">Low Engagement / ‡§∞‡•Å‡§ö‡§ø ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä</SelectItem>
                <SelectItem value="understanding">Concept Understanding / ‡§∏‡§Æ‡§ù ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ</SelectItem>
                <SelectItem value="behavior">Classroom Management / ‡§ï‡§ï‡•ç‡§∑‡§æ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£</SelectItem>
                <SelectItem value="resources">Limited Resources / ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§® ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä</SelectItem>
                <SelectItem value="assessment">Assessment Methods / ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®</SelectItem>
                <SelectItem value="motivation">Student Motivation / ‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <Button 
            onClick={handleGenerate}
            disabled={!subject || !grade || !challenge || isGenerating}
            className="w-full bg-yellow-500 hover:bg-yellow-600 text-white transition-colors"
          >
            {isGenerating ? 'üí≠ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç... Generating Tips...' : '‚ú® ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡§æ‡§è‡§Ç ‚Ä¢ Get Personalized Tips'}
          </Button>
        </CardContent>
      </Card>

      {generatedTips && (
        <Card className="bg-white dark:bg-gray-800 border-yellow-200 dark:border-yellow-700 shadow-lg">
          <CardHeader>
            <CardTitle className="text-yellow-800 dark:text-yellow-200 flex items-center space-x-2">
              <span>üéØ</span>
              <span>Your Personalized Teaching Tips ‚Ä¢ ‡§Ü‡§™‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•Å‡§ù‡§æ‡§µ</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="prose prose-sm max-w-none">
              <div className="whitespace-pre-line text-gray-700 dark:text-gray-300 leading-relaxed">
                {generatedTips}
              </div>
            </div>
            <div className="mt-4 flex flex-wrap gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                className="text-yellow-700 dark:text-yellow-300 border-yellow-300 dark:border-yellow-600" 
                onClick={handleCopy}
              >
                üìã Copy / ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                className="text-yellow-700 dark:text-yellow-300 border-yellow-300 dark:border-yellow-600" 
                onClick={handleGenerateNew}
              >
                üîÑ New Tips / ‡§®‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ
              </Button>
            </div>
            <ContentDownloader 
              content={generatedTips}
              filename={`teaching-tips-${Date.now()}`}
              type="lesson"
            />
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default PersonalizedTips;
